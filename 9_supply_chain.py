import pandas as pd
import plotly.express as px
import plotly.io as pio
import plotly.graph_objects as go
pio.templates.default = "plotly_white"


#1. load row data
file_name = "9_supply_chain.csv"
data = pd.read_csv(file_name)
print(data)
#print(data.describe())
print(data.columns)

fig = px.scatter(data,
                 x="Price",
                 y="Revenue generated",
                 color="Product type",
                 hover_data=['Number of products sold'], 
                 trendline="ols")
#fig.show()


#2. some basic statistics for "product type vs sales"
data_avg_sales = data.groupby("Product type")["Price"].mean().reset_index()
data_tot_sales = data.groupby("Product type")["Price"].sum().reset_index()
data_num_sales = data.groupby("Product type")["Number of products sold"].sum().reset_index()
data_review_sales = data_avg_sales.merge(data_tot_sales, on="Product type")
data_review_sales = data_review_sales.merge(data_num_sales, on="Product type")
# data_review_sales = data_review_sales.rename(
#     columns={"Price_x": "Avg sales", 
#              "Price_y": "Tot sales",
#              "Price_z": "Num sales"})
data_review_sales.columns = ["Product type", 
                             "Avg price", 
                             "Tot sales", 
                             "Num sales"]
print(data_review_sales)
fig = px.bar(data_review_sales,
             x="Product type",
             y="Avg price",
             color="Product type",
             title="Average USD sales per product type")
fig.update_layout(xaxis_title="Product type",
                  yaxis_title="Average sales USD")
#fig.show()

fig = px.pie(data_review_sales,
             values="Num sales",
             names="Product type",
             hover_data=["Num sales"],
             title="Sales by product type",
             hole=0.5,
             color_discrete_sequence=px.colors.qualitative.Pastel)
fig.update_traces(textposition='inside', textinfo='percent+label')
#fig.show()


#3. total revenue
total_revenue = data.groupby("Shipping carriers")["Revenue generated"].sum().reset_index()
print(total_revenue)

fig = px.bar(total_revenue,
              x="Shipping carriers",
              y="Revenue generated",
              title="Total revenue by Shipping carrier")
fig.update_layout(xaxis_title="Revenue Generated",
                  yaxis_title="Shipping Carrier")
#fig.show()


#4. avg lead time and avg manufacturing costos
avg_lead_time = data.groupby("Product type")["Lead time"].mean().reset_index()
avg_manufacturing_costs = data.groupby("Product type")["Manufacturing costs"].mean().reset_index()
result = pd.merge(avg_lead_time, avg_manufacturing_costs, on="Product type")
result = result.rename(columns={"Lead time": "Average Lead Time", 
                       "Manufacturing costs": "Average Manufacturing Costs"})
print(result)

fig = px.line(data,
              x="SKU",
              y="Revenue generated",
              title="Revene generated by SKU")
#fig.show()


fig = px.bar(data,
             x="SKU",
             y="Order quantities",
             title="Order quantities by SKU")
#fig.show()


#5. defect rate (%) statistics
defect_rate_by_product = data.groupby("Product type")["Defect rates"].mean().reset_index()
defect_rate_by_transportation = data.groupby("Transportation modes")["Defect rates"].mean().reset_index()
pivot_table = pd.pivot_table(data,
                             values="Defect rates",
                             index=["Transportation modes"],
                             aggfunc="mean")
print(defect_rate_by_product)
print(defect_rate_by_transportation)
print(pivot_table)

fig = px.bar(defect_rate_by_product,
             x="Product type",
             y="Defect rates",
             title="Average defect rate per product type")
#fig.show()

fig = px.pie(values=pivot_table["Defect rates"],
             #names=pivot_table["Transportation modes"],
             names=pivot_table.index,
             title="Defect rates by Transportation modes",
             hole=0.5,
             color_discrete_sequence=px.colors.qualitative.Pastel)
fig.show()

